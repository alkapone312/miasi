-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML
-- @path API=/ApiEntity/model/apiEntity.ecore

module ApiEntity2ClassDiagram;

create OUT : UML from IN : API, PT : UML;

helper def : IntegerType : UML!PrimitiveType =
	UML!PrimitiveType.allInstances()->any(p | p.name = 'Integer');

helper def : lowerBoundForMultiplicity(multiplicity: API!Multiplicity): Integer = 
	if multiplicity = #ONE then
		1
	else 
		0
	endif;

helper def : upperBoundForMultiplicity(multiplicity: API!Multiplicity): Integer = 
	if multiplicity = #ONE or multiplicity = #OPTIONAL then
		1
	else
		if multiplicity = #MULTIPLE then
		  -1
		else
          0
		endif
	endif;

helper context String def: toUpperFirst() : String =
	self.substring(1,1).toUpper() + self.substring(2, self.size());

helper context String def: toLowerFirst() : String =
	self.substring(1,1).toLower() + self.substring(2, self.size());

helper context String def: normalize() : String = 
	self.toPascalCase().toLower();



helper context String def: toPascalCase() : String =
	let parts : Sequence(String) = self.split(' ') in
	if parts.size() = 0 then
		''
	else
		parts->collect(p | p.toUpperFirst())->flatten()->iterate(s; res: String = '' | res + s)
	endif;

helper def : getUmlPrimitiveType(p : API!PrimitiveType) : UML!PrimitiveType =
  UML!PrimitiveType.allInstances()->any(t | t.name = p.name);

helper def : getUmlClassFromValueObject(v : API!ValueObject) : UML!Class =
  thisModule.resolveTemp(v, 'object_class');

helper def : getDefaultUmlPrimitiveType() : UML!PrimitiveType =
  UML!PrimitiveType.allInstances()->any(p | p.name = 'Integer');

helper context API!ApiType def: getUmlType() : UML!Type =
  if self.oclIsKindOf(API!PrimitiveType) then
    thisModule.getUmlPrimitiveType(self)
  else 
  	if self.oclIsKindOf(API!ValueObject) then
	  thisModule.getUmlClassFromValueObject(self)
	else
	  thisModule.getDefaultUmlPrimitiveType()
    endif
endif;


helper context String def: toCamelCase() : String = self.toPascalCase().toLowerFirst();

helper def: getRootPackage() : UML!Package = UML!Package.allInstances().first();

helper context API!Operation def: getMethodPrefix() : String =
	if self.type = #CREATE then
		'create'
	else if self.type = #GET then
		'get'
	else if self.type = #UPDATE then
		'update'
	else if self.type = #DELETE then
		'delete'
	else
		'unknown' -- fallback/default
	endif endif endif endif;

lazy rule TransformAttribute {
	from
		attribute: API!Attribute
	to
		property: UML!Property(
			name <- attribute.name.toCamelCase(),
			type <-  attribute.type.getUmlType(),
			lower <- thisModule.lowerBoundForMultiplicity(attribute.multiplicity),
			upper <- thisModule.upperBoundForMultiplicity(attribute.multiplicity),
			visibility <- #private
		)
}

lazy rule TransformOperation {
	from
		operation: API!Operation
	to
		uml_operation: UML!Operation(
			name <- operation.name.toCamelCase(),
			ownedParameter <- Sequence { returnParam }
		),
		returnParam: UML!Parameter(
			direction <- #return,
			type <- operation.returnType.getUmlType(),
			lower <- thisModule.lowerBoundForMultiplicity(operation.multiplicity),
			upper <- thisModule.upperBoundForMultiplicity(operation.multiplicity)
		)
}

lazy rule CreateGetter {
	from 
		class: UML!Class,
		attr: API!Attribute
	to
		uml_operation: UML!Operation(
			name <- 'get' + attr.name.toPascalCase(),
			ownedParameter <- Sequence { returnParam }
		),
		returnParam: UML!Parameter(
			direction <- #return,
			type <- attr.type.getUmlType(),
			lower <- thisModule.lowerBoundForMultiplicity(attr.multiplicity),
			upper <- thisModule.upperBoundForMultiplicity(attr.multiplicity)
		)
	do {
		class.ownedOperation <- Sequence {uml_operation};	
	}
}

lazy rule CreateSetter {
	from 
		class: UML!Class,
		attr: API!Attribute
	to
		uml_operation: UML!Operation(
			name <- 'set' + attr.name.toPascalCase(),
			ownedParameter <- Sequence { inParam }
		),
		inParam: UML!Parameter(
			direction <- 'in',
			name <- attr.name.toCamelCase(),
			type <- attr.type.getUmlType(),
			lower <- thisModule.lowerBoundForMultiplicity(attr.multiplicity),
			upper <- thisModule.upperBoundForMultiplicity(attr.multiplicity)
		)
	do {
		class.ownedOperation <- Sequence {uml_operation};	
	}
}


lazy rule CommonRepositoryMethods {
	from
		entity: UML!Class,
		entity_repository: UML!Class
	to
		findAll: UML!Operation (
			name <- 'findAll',
			ownedParameter <- Sequence { returnParamList_findAll }
		),
		findOne: UML!Operation (
			name <- 'findOne',
			ownedParameter <- Sequence { inputParam_findOne, returnParam_findOne }
		),
		createNew: UML!Operation(
			name <- 'create',
			ownedParameter <- Sequence { returnParam_create, inputParam_create }
		),
		update: UML!Operation(
			name <- 'update',
			ownedParameter <- Sequence { returnParam_update, inputParam_update }
		),
		delete: UML!Operation(
			name <- 'delete',
			ownedParameter <- Sequence { returnParam_delete, inputParam_delete }
		),
		inputParam_findOne: UML!Parameter (
			name <- 'id',
			direction <- 'in',
			type <- entity,
			lower <- 1,
			upper <- 1
		),
		returnParamList_findAll: UML!Parameter (
			direction <- #return,
			type <- entity,
			lower <- 0,
			upper <- -1
		),
		returnParam_findOne: UML!Parameter (
			direction <- #return,
			type <- entity,
			lower <- 0,
			upper <- 1
		),
		returnParam_create: UML!Parameter (
			direction <- #return,
			type <- entity,
			lower <- 1,
			upper <- 1
		),
		inputParam_create: UML!Parameter (
			name <- 'autor',
			direction <- 'in',
			type <- entity,
			lower <- 1,
			upper <- 1
		),
		returnParam_update: UML!Parameter (
			direction <- #return,
			type <- entity,
			lower <- 1,
			upper <- 1
		),
		inputParam_update: UML!Parameter (
			name <- 'autor',
			direction <- 'in',
			type <- entity,
			lower <- 1,
			upper <- 1
		),
		returnParam_delete: UML!Parameter (
			direction <- #return,
			type <- entity,
			lower <- 1,
			upper <- 1
		),
		inputParam_delete: UML!Parameter (
			name <- 'autor',
			direction <- 'in',
			type <- entity,
			lower <- 1,
			upper <- 1
		)
	do {
		entity_repository.ownedOperation <- Sequence { findAll, findOne, createNew, update, delete };
	}
}

lazy rule PropertyToParameter {
	from prop: UML!Property
	to param: UML!Parameter(
		name <- prop.name,
		type <- prop.type,
		lower <- prop.lower,
		upper <- prop.upper
	)
}

lazy rule AllArgConstructor {
	from class: UML!Class
	to operation: UML!Operation (
		name <- class.name,
		ownedParameter <- Sequence {}
	)
	do {
		operation.ownedParameter <- class.ownedAttribute->collect(attr | thisModule.PropertyToParameter(attr));
		class.ownedOperation <- Sequence {operation};
	}
}

lazy rule NoArgConstructor {
	from class: UML!Class
	to operation: UML!Operation (
		name <- class.name
	)
	do {
		class.ownedOperation <- Sequence {operation};
	}
}

rule TransformApi {
	from
		a : API!Api
	to
		p : UML!Package (
			name <- a.name
		)
}

rule TransformValueObject {
	from
		vo: API!ValueObject(vo.oclIsTypeOf(API!ValueObject))
	to
		object_class: UML!Class (
			name <- vo.name.toPascalCase()
		)
	do {
		thisModule.getRootPackage().packagedElement <- object_class;
		object_class.ownedAttribute <- vo.attribute
			->collect(attr | thisModule.TransformAttribute(attr));
		thisModule.AllArgConstructor(object_class);
		object_class.ownedOperation <- vo.attribute
			->select(attr | attr.gettable)->collect(attr | thisModule.CreateGetter(object_class, attr));
		object_class.ownedOperation <- vo.attribute
			->select(attr | attr.settable)->collect(attr | thisModule.CreateSetter(object_class, attr));
	}
}

rule TransformEntity {
	from
		entity : API!Entity(entity.oclIsTypeOf(API!Entity))
	to
		object_class : UML!Class(
			name <- entity.name.toPascalCase(),
			ownedAttribute <- Sequence {id_attr},
			ownedOperation <- Sequence {id_getter}
		),
		id_attr: UML!Property(
			name <- 'id',
			type <- thisModule.IntegerType,
			visibility <- #private
		),
		id_getter: UML!Operation(
			name <- 'getId',
			ownedParameter <- Sequence {id_getter_return_param}
		),
		id_getter_return_param: UML!Parameter(
			direction <- #return,
			type <- id_attr.type
		),
		entity_controller : UML!Class(
			name <- entity.name.toPascalCase() + 'Controller',
			ownedAttribute <- Sequence {
				controller_repository_controller_end
			}
		),
		entity_repository : UML!Class(
			name <- entity.name.toPascalCase() + 'Repository'
		),
		repo_usage : UML!Usage (
			client <- Sequence{ 
				entity_repository 
			},
			supplier <- Sequence{ 
				object_class 
			}
		),
		controller_repository_association : UML!Association (
			memberEnd <- Sequence { 
				controller_repository_controller_end, 
				controller_repository_repository_end 
			},
			ownedEnd <- Sequence { 
				controller_repository_repository_end 
			}
		),
		controller_repository_controller_end : UML!Property (
			name <- entity.name.toCamelCase() + 'Repository',
			type <- entity_repository,
			visibility <- #private,
			aggregation <- #shared
		),
		controller_repository_repository_end : UML!Property (
			type <- entity_controller,
			visibility <- #private
		)
		do {
			thisModule.getRootPackage().packagedElement <- Sequence {
				object_class,
				entity_controller,
				entity_repository,
				repo_usage,
				controller_repository_association
			};
			object_class.ownedAttribute <- entity.attribute
				->collect(attr | thisModule.TransformAttribute(attr));
			thisModule.AllArgConstructor(object_class);
			object_class.ownedOperation <- entity.attribute->select(attr | attr.gettable)->collect(attr | thisModule.CreateGetter(object_class, attr));
			object_class.ownedOperation <- entity.attribute->select(attr | attr.settable)->collect(attr | thisModule.CreateSetter(object_class, attr));
			entity_controller.ownedOperation <- entity.operation
				->collect(op | thisModule.TransformOperation(op));
			thisModule.CommonRepositoryMethods(object_class, entity_repository);
		}
}